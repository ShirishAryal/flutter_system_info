// Autogenerated from Pigeon (v22.4.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

enum ConnectionType {
  wifi,
  mobileData,
  bluetooth,
}

class DeviceInfoModel {
  DeviceInfoModel({
    this.osVersion,
    this.sdkVersion,
    this.manufacturer,
    this.brand,
    this.model,
    this.product,
    this.device,
    this.hardware,
    this.board,
    this.buildId,
    this.buildType,
    this.buildTime,
  });

  /// The user-visible version string of the Android/iOS (e.g., "13")
  String? osVersion;

  /// The SDK version of the software running on this hardware device (e.g., 33 for Android 13)
  int? sdkVersion;

  /// The manufacturer of the product/hardware (e.g., "Samsung")
  String? manufacturer;

  /// The consumer-visible brand with which the product/hardware will be associated (e.g., "Google")
  String? brand;

  /// The end-user-visible name for the end product (e.g., "Pixel 6")
  String? model;

  /// The name of the overall product (e.g., "sailfish")
  String? product;

  /// The name of the industrial design (e.g., "sailfish")
  String? device;

  /// The name of the hardware (from the kernel command line or /proc) (e.g., "qcom")
  String? hardware;

  /// The name of the underlying board (e.g., "goldfish")
  String? board;

  /// A build ID string meant for displaying to the user (e.g., "NMF26Q")
  String? buildId;

  /// The type of build, like "user" or "eng"
  String? buildType;

  /// The time at which the build was produced, given in milliseconds since the epoch
  int? buildTime;

  Object encode() {
    return <Object?>[
      osVersion,
      sdkVersion,
      manufacturer,
      brand,
      model,
      product,
      device,
      hardware,
      board,
      buildId,
      buildType,
      buildTime,
    ];
  }

  static DeviceInfoModel decode(Object result) {
    result as List<Object?>;
    return DeviceInfoModel(
      osVersion: result[0] as String?,
      sdkVersion: result[1] as int?,
      manufacturer: result[2] as String?,
      brand: result[3] as String?,
      model: result[4] as String?,
      product: result[5] as String?,
      device: result[6] as String?,
      hardware: result[7] as String?,
      board: result[8] as String?,
      buildId: result[9] as String?,
      buildType: result[10] as String?,
      buildTime: result[11] as int?,
    );
  }
}

/// A class representing detailed information about an Android application.
class ApplicationInfoModel {
  ApplicationInfoModel({
    this.appName,
    this.packageName,
    this.versionName,
    this.versionCode,
    this.installTime,
    this.lastUpdateTime,
    this.targetSdkVersion,
    this.minSdkVersion,
    this.dataDirectory,
    this.sourceDirectory,
    this.permissions,
  });

  /// The name of the application.
  String? appName;

  /// The package name of the application.
  String? packageName;

  /// The version name of the application.
  String? versionName;

  /// The version code of the application.
  int? versionCode;

  /// The timestamp when the application was first installed (in milliseconds since epoch).
  int? installTime;

  /// The timestamp when the application was last updated (in milliseconds since epoch).
  int? lastUpdateTime;

  /// The target SDK version of the application.
  int? targetSdkVersion;

  /// The minimum SDK version required by the application.
  int? minSdkVersion;

  /// The path to the application's data directory.
  String? dataDirectory;

  /// The path to the application's APK file.
  String? sourceDirectory;

  /// The list of permissions requested by the application.
  List<String>? permissions;

  Object encode() {
    return <Object?>[
      appName,
      packageName,
      versionName,
      versionCode,
      installTime,
      lastUpdateTime,
      targetSdkVersion,
      minSdkVersion,
      dataDirectory,
      sourceDirectory,
      permissions,
    ];
  }

  static ApplicationInfoModel decode(Object result) {
    result as List<Object?>;
    return ApplicationInfoModel(
      appName: result[0] as String?,
      packageName: result[1] as String?,
      versionName: result[2] as String?,
      versionCode: result[3] as int?,
      installTime: result[4] as int?,
      lastUpdateTime: result[5] as int?,
      targetSdkVersion: result[6] as int?,
      minSdkVersion: result[7] as int?,
      dataDirectory: result[8] as String?,
      sourceDirectory: result[9] as String?,
      permissions: (result[10] as List<Object?>?)?.cast<String>(),
    );
  }
}

class ScreenInfoModel {
  ScreenInfoModel({
    this.widthPixels,
    this.heightPixels,
    this.densityDpi,
    this.density,
    this.scaledDensity,
    this.widthDp,
    this.heightDp,
    this.brightnessLevel,
  });

  /// The width of the screen in physical pixels.
  int? widthPixels;

  /// The height of the screen in physical pixels.
  int? heightPixels;

  /// The screen density expressed as dots-per-inch.
  int? densityDpi;

  /// A scaling factor for fonts displayed on the screen.
  double? density;

  /// A scaling factor for the Scalable Pixel (sp) unit.
  double? scaledDensity;

  /// The absolute width of the display in density-independent pixels (dp).
  double? widthDp;

  /// The absolute height of the display in density-independent pixels (dp).
  double? heightDp;

  /// The current brightness of the screen, from 0 (lowest) to 1 (highest).
  double? brightnessLevel;

  Object encode() {
    return <Object?>[
      widthPixels,
      heightPixels,
      densityDpi,
      density,
      scaledDensity,
      widthDp,
      heightDp,
      brightnessLevel,
    ];
  }

  static ScreenInfoModel decode(Object result) {
    result as List<Object?>;
    return ScreenInfoModel(
      widthPixels: result[0] as int?,
      heightPixels: result[1] as int?,
      densityDpi: result[2] as int?,
      density: result[3] as double?,
      scaledDensity: result[4] as double?,
      widthDp: result[5] as double?,
      heightDp: result[6] as double?,
      brightnessLevel: result[7] as double?,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is ConnectionType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is DeviceInfoModel) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is ApplicationInfoModel) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is ScreenInfoModel) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ConnectionType.values[value];
      case 130: 
        return DeviceInfoModel.decode(readValue(buffer)!);
      case 131: 
        return ApplicationInfoModel.decode(readValue(buffer)!);
      case 132: 
        return ScreenInfoModel.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class SystemInfoPigeon {
  /// Constructor for [SystemInfoPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  SystemInfoPigeon({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<DeviceInfoModel> getDeviceInfo() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.system_info.SystemInfoPigeon.getDeviceInfo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as DeviceInfoModel?)!;
    }
  }

  Future<ApplicationInfoModel> getAppInfo() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.system_info.SystemInfoPigeon.getAppInfo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as ApplicationInfoModel?)!;
    }
  }

  Future<bool> isNetworkAvailable() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.system_info.SystemInfoPigeon.isNetworkAvailable$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<List<ConnectionType>> networkConnections() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.system_info.SystemInfoPigeon.networkConnections$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!.cast<ConnectionType>();
    }
  }

  Future<bool> isNotificationEnableForChannel({required String channelId}) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.system_info.SystemInfoPigeon.isNotificationEnableForChannel$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[channelId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<bool> openNotificationSetting() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.system_info.SystemInfoPigeon.openNotificationSetting$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<ScreenInfoModel> getScreenInfo() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.system_info.SystemInfoPigeon.getScreenInfo$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as ScreenInfoModel?)!;
    }
  }
}
