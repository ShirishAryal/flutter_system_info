// Autogenerated from Pigeon (v22.4.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum ConnectionType: Int {
  case wifi = 0
  case mobileData = 1
  case bluetooth = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct DeviceInfoModel {
  /// The user-visible version string of the Android/iOS (e.g., "13")
  var osVersion: String? = nil
  /// The SDK version of the software running on this hardware device (e.g., 33 for Android 13)
  var sdkVersion: Int64? = nil
  /// The manufacturer of the product/hardware (e.g., "Samsung")
  var manufacturer: String? = nil
  /// The consumer-visible brand with which the product/hardware will be associated (e.g., "Google")
  var brand: String? = nil
  /// The end-user-visible name for the end product (e.g., "Pixel 6")
  var model: String? = nil
  /// The name of the overall product (e.g., "sailfish")
  var product: String? = nil
  /// The name of the industrial design (e.g., "sailfish")
  var device: String? = nil
  /// The name of the hardware (from the kernel command line or /proc) (e.g., "qcom")
  var hardware: String? = nil
  /// The name of the underlying board (e.g., "goldfish")
  var board: String? = nil
  /// A build ID string meant for displaying to the user (e.g., "NMF26Q")
  var buildId: String? = nil
  /// The type of build, like "user" or "eng"
  var buildType: String? = nil
  /// The time at which the build was produced, given in milliseconds since the epoch
  var buildTime: Int64? = nil



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> DeviceInfoModel? {
    let osVersion: String? = nilOrValue(pigeonVar_list[0])
    let sdkVersion: Int64? = nilOrValue(pigeonVar_list[1])
    let manufacturer: String? = nilOrValue(pigeonVar_list[2])
    let brand: String? = nilOrValue(pigeonVar_list[3])
    let model: String? = nilOrValue(pigeonVar_list[4])
    let product: String? = nilOrValue(pigeonVar_list[5])
    let device: String? = nilOrValue(pigeonVar_list[6])
    let hardware: String? = nilOrValue(pigeonVar_list[7])
    let board: String? = nilOrValue(pigeonVar_list[8])
    let buildId: String? = nilOrValue(pigeonVar_list[9])
    let buildType: String? = nilOrValue(pigeonVar_list[10])
    let buildTime: Int64? = nilOrValue(pigeonVar_list[11])

    return DeviceInfoModel(
      osVersion: osVersion,
      sdkVersion: sdkVersion,
      manufacturer: manufacturer,
      brand: brand,
      model: model,
      product: product,
      device: device,
      hardware: hardware,
      board: board,
      buildId: buildId,
      buildType: buildType,
      buildTime: buildTime
    )
  }
  func toList() -> [Any?] {
    return [
      osVersion,
      sdkVersion,
      manufacturer,
      brand,
      model,
      product,
      device,
      hardware,
      board,
      buildId,
      buildType,
      buildTime,
    ]
  }
}

/// A class representing detailed information about an Android application.
///
/// Generated class from Pigeon that represents data sent in messages.
struct ApplicationInfoModel {
  /// The name of the application.
  var appName: String? = nil
  /// The package name of the application.
  var packageName: String? = nil
  /// The version name of the application.
  var versionName: String? = nil
  /// The version code of the application.
  var versionCode: Int64? = nil
  /// The timestamp when the application was first installed (in milliseconds since epoch).
  var installTime: Int64? = nil
  /// The timestamp when the application was last updated (in milliseconds since epoch).
  var lastUpdateTime: Int64? = nil
  /// The target SDK version of the application.
  var targetSdkVersion: Int64? = nil
  /// The minimum SDK version required by the application.
  var minSdkVersion: Int64? = nil
  /// The path to the application's data directory.
  var dataDirectory: String? = nil
  /// The path to the application's APK file.
  var sourceDirectory: String? = nil
  /// The list of permissions requested by the application.
  var permissions: [String]? = nil



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ApplicationInfoModel? {
    let appName: String? = nilOrValue(pigeonVar_list[0])
    let packageName: String? = nilOrValue(pigeonVar_list[1])
    let versionName: String? = nilOrValue(pigeonVar_list[2])
    let versionCode: Int64? = nilOrValue(pigeonVar_list[3])
    let installTime: Int64? = nilOrValue(pigeonVar_list[4])
    let lastUpdateTime: Int64? = nilOrValue(pigeonVar_list[5])
    let targetSdkVersion: Int64? = nilOrValue(pigeonVar_list[6])
    let minSdkVersion: Int64? = nilOrValue(pigeonVar_list[7])
    let dataDirectory: String? = nilOrValue(pigeonVar_list[8])
    let sourceDirectory: String? = nilOrValue(pigeonVar_list[9])
    let permissions: [String]? = nilOrValue(pigeonVar_list[10])

    return ApplicationInfoModel(
      appName: appName,
      packageName: packageName,
      versionName: versionName,
      versionCode: versionCode,
      installTime: installTime,
      lastUpdateTime: lastUpdateTime,
      targetSdkVersion: targetSdkVersion,
      minSdkVersion: minSdkVersion,
      dataDirectory: dataDirectory,
      sourceDirectory: sourceDirectory,
      permissions: permissions
    )
  }
  func toList() -> [Any?] {
    return [
      appName,
      packageName,
      versionName,
      versionCode,
      installTime,
      lastUpdateTime,
      targetSdkVersion,
      minSdkVersion,
      dataDirectory,
      sourceDirectory,
      permissions,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ScreenInfoModel {
  /// The width of the screen in physical pixels.
  var widthPixels: Int64? = nil
  /// The height of the screen in physical pixels.
  var heightPixels: Int64? = nil
  /// The screen density expressed as dots-per-inch.
  var densityDpi: Int64? = nil
  /// A scaling factor for fonts displayed on the screen.
  var density: Double? = nil
  /// A scaling factor for the Scalable Pixel (sp) unit.
  var scaledDensity: Double? = nil
  /// The absolute width of the display in density-independent pixels (dp).
  var widthDp: Double? = nil
  /// The absolute height of the display in density-independent pixels (dp).
  var heightDp: Double? = nil
  /// The current brightness of the screen, from 0 (lowest) to 1 (highest).
  var brightnessLevel: Double? = nil



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> ScreenInfoModel? {
    let widthPixels: Int64? = nilOrValue(pigeonVar_list[0])
    let heightPixels: Int64? = nilOrValue(pigeonVar_list[1])
    let densityDpi: Int64? = nilOrValue(pigeonVar_list[2])
    let density: Double? = nilOrValue(pigeonVar_list[3])
    let scaledDensity: Double? = nilOrValue(pigeonVar_list[4])
    let widthDp: Double? = nilOrValue(pigeonVar_list[5])
    let heightDp: Double? = nilOrValue(pigeonVar_list[6])
    let brightnessLevel: Double? = nilOrValue(pigeonVar_list[7])

    return ScreenInfoModel(
      widthPixels: widthPixels,
      heightPixels: heightPixels,
      densityDpi: densityDpi,
      density: density,
      scaledDensity: scaledDensity,
      widthDp: widthDp,
      heightDp: heightDp,
      brightnessLevel: brightnessLevel
    )
  }
  func toList() -> [Any?] {
    return [
      widthPixels,
      heightPixels,
      densityDpi,
      density,
      scaledDensity,
      widthDp,
      heightDp,
      brightnessLevel,
    ]
  }
}

private class SystemInfoApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return ConnectionType(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      return DeviceInfoModel.fromList(self.readValue() as! [Any?])
    case 131:
      return ApplicationInfoModel.fromList(self.readValue() as! [Any?])
    case 132:
      return ScreenInfoModel.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class SystemInfoApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? ConnectionType {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? DeviceInfoModel {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? ApplicationInfoModel {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? ScreenInfoModel {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class SystemInfoApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SystemInfoApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SystemInfoApiPigeonCodecWriter(data: data)
  }
}

class SystemInfoApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = SystemInfoApiPigeonCodec(readerWriter: SystemInfoApiPigeonCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SystemInfoPigeon {
  func getDeviceInfo() throws -> DeviceInfoModel
  func getAppInfo() throws -> ApplicationInfoModel
  func isNetworkAvailable() throws -> Bool
  func networkConnections() throws -> [ConnectionType]
  func isNotificationEnableForChannel(channelId: String) throws -> Bool
  func openNotificationSetting() throws -> Bool
  func getScreenInfo() throws -> ScreenInfoModel
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SystemInfoPigeonSetup {
  static var codec: FlutterStandardMessageCodec { SystemInfoApiPigeonCodec.shared }
  /// Sets up an instance of `SystemInfoPigeon` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SystemInfoPigeon?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getDeviceInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.system_info.SystemInfoPigeon.getDeviceInfo\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getDeviceInfoChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getDeviceInfo()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getDeviceInfoChannel.setMessageHandler(nil)
    }
    let getAppInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.system_info.SystemInfoPigeon.getAppInfo\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAppInfoChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getAppInfo()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getAppInfoChannel.setMessageHandler(nil)
    }
    let isNetworkAvailableChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.system_info.SystemInfoPigeon.isNetworkAvailable\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isNetworkAvailableChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isNetworkAvailable()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isNetworkAvailableChannel.setMessageHandler(nil)
    }
    let networkConnectionsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.system_info.SystemInfoPigeon.networkConnections\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      networkConnectionsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.networkConnections()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      networkConnectionsChannel.setMessageHandler(nil)
    }
    let isNotificationEnableForChannelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.system_info.SystemInfoPigeon.isNotificationEnableForChannel\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isNotificationEnableForChannelChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let channelIdArg = args[0] as! String
        do {
          let result = try api.isNotificationEnableForChannel(channelId: channelIdArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isNotificationEnableForChannelChannel.setMessageHandler(nil)
    }
    let openNotificationSettingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.system_info.SystemInfoPigeon.openNotificationSetting\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      openNotificationSettingChannel.setMessageHandler { _, reply in
        do {
          let result = try api.openNotificationSetting()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      openNotificationSettingChannel.setMessageHandler(nil)
    }
    let getScreenInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.system_info.SystemInfoPigeon.getScreenInfo\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getScreenInfoChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getScreenInfo()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getScreenInfoChannel.setMessageHandler(nil)
    }
  }
}
